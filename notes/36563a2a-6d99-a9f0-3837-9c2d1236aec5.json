{"uid":"36563a2a-6d99-a9f0-3837-9c2d1236aec5","body":"# Flight Tracker\n\nThis CLI application reads a flight connection table (including prices) and then answers questions about stops and prices.\n\n## Getting Started\n\n### Prerequisites\n\n* JDK 1.8. The JAVA_HOME environment varariable must point to that JDK and JDK's binaries must be included in system's PATH.\n* Any of these build systems:\n    * Maven 3.3.9\n    * Gradle 3.5\n    * Ant 1.9.x\n git\n\n### Installing\n\nCopy flitetrakr.zip to the desired folder and unzip it. \n\n```\n$ unzip flitetrakr.zip\n```\n\nMove to the **flitetrakr** folder just created after unzipping . \n\n```\n$ cd flitetrakr\n```\n\nBuild the application using the build system of your choice from the list in the **prerequisites** section.\n\n#### Maven\n\n```\n$ mvn clean\n$ mvn package\n```\n\n#### Gradle\n\n```\n$ gradle clean\n$ gradle build\n```\n\n#### Ant\n\n```\n$ ant clean\n$ ant\n```\n\nMake sure that you are connected to the Internet such that build system can resolve dependencies. The test cases executed by the build process may catch someone's attention in spite of the are not devised to illustrate application's capabilities; do not hover too much over JUNit test logs and please follow instructions in the next section in order check how the application works.  \n\n\n## Playing with the Application \nThe *flitetrakr/data* folder contains two files (namely *connections-1.txt* and *connections-2.txt*) that when provided as input to the application, yield the following results.\n \n### First Case: connections-2.txt.\n![alt text](images/connections-2.png \"Graph 1: Sample Input\")\nThis file contains the sample input and questions found in the [challenge page](https://bitbucket.org/adigsd/backend-flitetrakr). All answers match except *#7*; in this case the challenge answer is **2** whilst program output is **1**. However, if we ask the application to take into account repeated stops at the same place (by setting **-Dcom.assessment.flitetrakr.multiple=true**), we get a perfect match. Check the next two listings in order to catch the situation.\n\n####  Listing 1: Ignoring repeated stops at the same place.\n```\n$ java -jar target/flitetrakr-1.0-SNAPSHOT.jar  data/connections-2.txt \n1: What is the price of the connection NUE-FRA-LHR?\n1: 70\n\n2: What is the price of the connection NUE-AMS-LHR?\n2: No such connection found!\n\n3: What is the price of the connection NUE-FRA-LHR-NUE?\n3: 93\n\n4: What is the cheapest connection from NUE to AMS?\n4: NUE-FRA-AMS-60\n\n5: What is the cheapest connection from AMS to FRA?\n5: No such connection found!\n\n6: What is the cheapest connection from LHR to LHR?\n6: LHR-NUE-FRA-LHR-93\n\n7: How many different connections with maximum 3 stops exists between NUE and FRA?\n7: 1\n\n8: How many different connections with exactly 1 stop exists between LHR and AMS?\n8: 1\n\n9: Find all connections from NUE to LHR below 170Euros!\n9: NUE-FRA-LHR-70, NUE-FRA-LHR-NUE-FRA-LHR-163\n$\n\n```\n####  Listing 2: Counting repeated stops at the same place.\n```\n$ java -Dcom.assessment.flitetrakr.multiple=true -jar target/flitetrakr-1.0-SNAPSHOT.jar  data/connections-2.txt\n1: What is the price of the connection NUE-FRA-LHR?\n1: 70\n\n2: What is the price of the connection NUE-AMS-LHR?\n2: No such connection found!\n\n3: What is the price of the connection NUE-FRA-LHR-NUE?\n3: 93\n\n4: What is the cheapest connection from NUE to AMS?\n4: NUE-FRA-AMS-60\n\n5: What is the cheapest connection from AMS to FRA?\n5: No such connection found!\n\n6: What is the cheapest connection from LHR to LHR?\n6: LHR-NUE-FRA-LHR-93\n\n7: How many different connections with maximum 3 stops exists between NUE and FRA?\n7: 2\n\n8: How many different connections with exactly 1 stop exists between LHR and AMS?\n8: 1\n\n9: Find all connections from NUE to LHR below 170Euros!\n9: NUE-FRA-LHR-70, NUE-FRA-LHR-NUE-FRA-LHR-163\n$\n\n```\n\nSince all links between to airports are unidirectional (as implied by the connection format **<code-of-departure-airport>-<code-of-arrival-airport>-<price-in-euro>**), it is quite straight forward to understand why question #7 yield different answers by just taking a look at following directed graph (drawn by hand):\n \n### Break down into end to end tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n### And coding style tests\n\nExplain what these tests test and why\n\n```\nGive an example\n```\n\n## Deployment\n\nAdd additional notes about how to deploy this on a live system\n\n## Built With\n\n* [Dropwizard](http://www.dropwizard.io/1.0.2/docs/) - The web framework used\n* [Maven](https://maven.apache.org/) - Dependency Management\n* [ROME](https://rometools.github.io/rome/) - Used to generate RSS Feeds\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](https://gist.github.com/PurpleBooth/b24679402957c63ec426) for details on our code of conduct, and the process for submitting pull requests to us.\n\n## Versioning\n\nWe use [SemVer](http://semver.org/) for versioning. For the versions available, see the [tags on this repository](https://github.com/your/project/tags). \n\n## Authors\n\n* **Billie Thompson** - *Initial work* - [PurpleBooth](https://github.com/PurpleBooth)\n\nSee also the list of [contributors](https://github.com/your/project/contributors) who participated in this project.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Acknowledgments\n\n* Hat tip to anyone who's code was used\n* Inspiration\n* etc\n\n\n","folderUid":null,"updated_at":"2017-05-05T04:58:03.909Z","created_at":"2017-05-05T04:58:03.909Z","qiitaURL":null}